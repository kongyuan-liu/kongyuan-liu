class HeroNode{
    int data;
    HeroNode left,right;
}
class L26{
    public static int[]post=new int[31];
    public static int[]in=new int[31];

    public static void main(String[] args) {
        Scanner scan=new Scanner(new BufferedInputStream(System.in));
        int n=scan.nextInt();
        for(int i=0;i<n;i++){
            post[i]=scan.nextInt();
        }
        for(int i=0;i<n;i++){
            in[i]=scan.nextInt();
        }
        scan.close();
        HeroNode root=BuildTree(post,0,in,0,n);
        LevelOrder(root);
    }
    //層序排序
    public static void LevelOrder(HeroNode root){
        boolean isFlag=true;
        HeroNode current=root;
        Queue<HeroNode>queue=new LinkedList<HeroNode>();
        if(current==null)
            return;
        queue.offer(current);
        while(!queue.isEmpty()){
            current=queue.poll();
            if(isFlag==false){
                System.out.print(" "+current.data);
            }else{
                System.out.print(current.data);
                isFlag=false;
            }
            if(current.left!=null){
                queue.offer(current.left);
            }
            if(current.right!=null){
                queue.offer(current.right);
            }
        }
    }
    //建樹
    public static HeroNode BuildTree(int[]post, int pi, int[]in, int ini, int n){
        if(n<=0)
            return null;
        HeroNode heroNode=new HeroNode();
        heroNode.data=post[n-1+pi];
        int i;
        for(i=0;i<n;i++){
            if(in[ini+i]==heroNode.data)
                break;
        }
        heroNode.left = BuildTree(post, pi, in, ini, i);
        heroNode.right = BuildTree(post, pi + i, in, ini + i + 1, n - 1 - i);
        return heroNode;
    }
}